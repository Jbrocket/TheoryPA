#!/usr/bin/env python3

import re_groups
import argparse
import sys
def main():
	parser = argparse.ArgumentParser(description ='heck');
	group = parser.add_mutually_exclusive_group(required=True)
	group.add_argument('-f');
	group.add_argument('-e', action='append');
	parser.add_argument('filename', nargs='?')
	args = parser.parse_args();
	if args.f == None:
		mylist = args.e
	else:
		mylist = read_file(args.f)

	commandlist = list()	
	for line in mylist:
		commandlist.append(command_parse(line));

	if args.filename != None:
		stringlist = read_file(args.filename)
		for string in stringlist:
			new_string = run(commandlist, string)
			if(new_string == None):
				new_string == ''
			print(new_string)
		
	else:
		for string in sys.stdin:
			new_string = run(commandlist, string.strip())
			if(new_string == None):
				new_string = ''
			print(new_string)

#	new_string = run(commandlist, args.filename)


def run(commandlist, string):
	label_dict = {};
	new_string = string;
	index = 0;
	while(index < len(commandlist)):
		command = commandlist[index]
		if(command[0] == 'replace'):
			accept, group_dict= re_groups.get_re_groups(command[1], new_string);
			if accept == 'accept':
				new_string = '';
				for i, item in enumerate(command[2]):
					if len(item) > 0 and item[0] == '\\':
						if int(item[1:]) in group_dict:
							new_string += group_dict[int(item[1:])];
						else:	
							new_string += item;
					else:
						new_string += item
			else:
				return string
			index += 1;
		elif(command[0] == 'label'):
			if command[1] not in label_dict:
				label_dict[command[1]] = index;
				index += 1;
			else:
				return
		elif(command[0] == 'branch'):
			accept, group_dict = re_groups.get_re_groups(command[1], new_string)
			if accept == 'accept' and command[2] in label_dict:
				index = label_dict[command[2]] + 1;		
			else:
				index += 1;
					
				
	return new_string;


	

def command_parse(raw_command):
	identifier = raw_command[0];

	if(identifier == ':'):
		return ['label', raw_command[1:], None]

	elif(identifier == '/'):
		return parse_branch(raw_command[1:]);
	
	elif(identifier == 's'):
		return parse_substitution(raw_command[1:])


def parse_branch(command):
	indices = list();
	for i, char in enumerate(command):
		if char == '/':
			indices.append(i);
	splitlist = ['branch'];
	splitlist.append(command[:indices[0]])
	splitlist.append(command[indices[0]+2:])	
	return splitlist

def parse_substitution(command):
	indices = list();
	for i, char in enumerate(command):
		if char == '/':
			indices.append(i)
	splitlist = ['replace']	
	splitlist.append(command[indices[0]+1:indices[1]])	
	splitlist.append(parse_replacement(command[indices[1]+1:indices[2]]));
	return splitlist	


def parse_replacement(raw_group):
	groups = list();
	indices = list();
#	groups = raw_group.split('\\');
	splits = list();
	for i, char in enumerate(raw_group):
		if char == '\\':
			indices.append(i);
	if(len(indices) == 1):
		splits.append(raw_group[:indices[0]])
		splits.append(raw_group[indices[0]:])
	elif(len(indices) > 1):
		splits.append(raw_group[:indices[1]]);
		for i in range(1, len(indices)-1):
			splits.append(raw_group[indices[i]:indices[i+1]])
		splits.append(raw_group[indices[len(indices)-1]:]);
	
#		
#
	for s in splits:
		if s.find('g') != -1:
			indexa = s.index('<');
			indexb = s.index('>');
			groups.append('\\' + s[indexa+1:indexb])
			groups.append(s[indexb+1:]);
		else:
			if s == '':
				continue;
			elif s[1:].isdecimal():
				groups.append(s);
			elif s.find('\\') == -1:
				groups.append(s);
			else:
				i = 1;
				while s[i].isdecimal() and i < len(s):
					i+=1;
				groups.append(s[:i]);
				groups.append(s[i:]);
						
	return groups
	
def read_file(filename):
	linelist = list();
	with open(filename) as fin:
		temp = _read_line(fin)
		while temp:
			linelist.append(temp)
			temp =_read_line(fin);
	return linelist
	
def _read_line(fin):
	line = fin.readline();
	if line:
		return line.rstrip('\n');
	else:
		return None

if __name__ == '__main__':
	main();
